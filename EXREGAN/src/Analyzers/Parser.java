
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 20 19:41:18 CST 2023
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;
import exregan.Manager;
import exregan.MasterMindUI.*;
import exregan.Error_DAO;
import exregan.Node;
import exregan.Statement;
import exregan.MasterMindUI;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 20 19:41:18 CST 2023
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\006\007\000\002\006\006\000\002\010\002" +
    "\000\002\005\013\000\002\005\010\000\002\011\002\000" +
    "\002\005\012\000\002\005\007\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\007\006\001\002\000\004\002\114\001" +
    "\002\000\004\002\000\001\002\000\006\012\011\013\007" +
    "\001\002\000\004\022\110\001\002\000\010\005\035\012" +
    "\036\013\034\001\002\000\004\011\012\001\002\000\004" +
    "\013\013\001\002\000\004\022\ufff9\001\002\000\004\022" +
    "\015\001\002\000\004\023\016\001\002\000\014\014\020" +
    "\025\017\026\022\027\023\030\024\001\002\000\004\033" +
    "\uffe8\001\002\000\004\033\uffe9\001\002\000\004\033\033" +
    "\001\002\000\004\006\031\001\002\000\004\006\027\001" +
    "\002\000\004\006\025\001\002\000\004\030\026\001\002" +
    "\000\004\033\uffea\001\002\000\004\027\030\001\002\000" +
    "\004\033\uffec\001\002\000\004\026\032\001\002\000\004" +
    "\033\uffeb\001\002\000\010\005\ufff8\012\ufff8\013\ufff8\001" +
    "\002\000\004\022\063\001\002\000\004\005\046\001\002" +
    "\000\004\011\037\001\002\000\004\013\040\001\002\000" +
    "\004\022\ufffc\001\002\000\004\022\042\001\002\000\004" +
    "\023\043\001\002\000\014\014\020\025\017\026\022\027" +
    "\023\030\024\001\002\000\004\033\045\001\002\000\010" +
    "\005\ufffb\012\ufffb\013\ufffb\001\002\000\004\005\047\001" +
    "\002\000\004\005\050\001\002\000\004\013\052\001\002" +
    "\000\006\010\056\013\057\001\002\000\004\011\053\001" +
    "\002\000\004\031\054\001\002\000\004\033\055\001\002" +
    "\000\006\010\ufffd\013\ufffd\001\002\000\004\002\uffff\001" +
    "\002\000\004\011\060\001\002\000\004\031\061\001\002" +
    "\000\004\033\062\001\002\000\006\010\ufffe\013\ufffe\001" +
    "\002\000\004\023\064\001\002\000\026\015\072\016\075" +
    "\017\065\020\066\021\073\032\077\034\067\035\070\036" +
    "\076\037\074\001\002\000\026\015\072\016\075\017\065" +
    "\020\066\021\073\032\077\034\067\035\070\036\076\037" +
    "\074\001\002\000\026\015\072\016\075\017\065\020\066" +
    "\021\073\032\077\034\067\035\070\036\076\037\074\001" +
    "\002\000\030\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\001" +
    "\002\000\030\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\001" +
    "\002\000\004\033\104\001\002\000\026\015\072\016\075" +
    "\017\065\020\066\021\073\032\077\034\067\035\070\036" +
    "\076\037\074\001\002\000\026\015\072\016\075\017\065" +
    "\020\066\021\073\032\077\034\067\035\070\036\076\037" +
    "\074\001\002\000\030\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\001\002\000\026\015\072\016\075\017\065\020\066" +
    "\021\073\032\077\034\067\035\070\036\076\037\074\001" +
    "\002\000\030\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\001" +
    "\002\000\030\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\001" +
    "\002\000\030\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\001" +
    "\002\000\030\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\001" +
    "\002\000\026\015\072\016\075\017\065\020\066\021\073" +
    "\032\077\034\067\035\070\036\076\037\074\001\002\000" +
    "\030\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\001\002\000" +
    "\010\005\ufffa\012\ufffa\013\ufffa\001\002\000\026\015\072" +
    "\016\075\017\065\020\066\021\073\032\077\034\067\035" +
    "\070\036\076\037\074\001\002\000\030\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\001\002\000\030\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\001\002\000\004\023\111\001\002" +
    "\000\026\015\072\016\075\017\065\020\066\021\073\032" +
    "\077\034\067\035\070\036\076\037\074\001\002\000\004" +
    "\033\113\001\002\000\010\005\ufff7\012\ufff7\013\ufff7\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\070\001\001\000" +
    "\004\004\106\001\001\000\004\004\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\101\001\001\000\004\004\100\001\001\000\002\001\001" +
    "\000\004\004\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public int counter=1;
    public int numerate = 1;
    public static Node root;
    public String conjAs="";
    public void syntax_error(Symbol s){
        System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        MasterMindUI.errorDaoHandler.newError("Tipo Sintáctico","Identificador " +s.value + " no reconocido" , (s.right+1),(s.left+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        MasterMindUI.errorDaoHandler.newError("Tipo Sintáctico","Identificador " +s.value + " no reconocido" , (s.right+1),(s.left+1) );
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NOTATION ::= LettersList 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String list = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Manager.commasConj(parser.conjAs, list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOTATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NOTATION ::= NumbersList 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String list = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Manager.commasConj(parser.conjAs, list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOTATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NOTATION ::= Character prime Character 
            {
              Object RESULT =null;
		int firstCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String firstC = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String secondC = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Manager.rangeConj(parser.conjAs, firstC, secondC);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOTATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NOTATION ::= Letter prime Letter 
            {
              Object RESULT =null;
		int firstLetterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstLetterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String firstLetter = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondLetterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondLetterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String secondLetter = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Manager.numberLetterManage(parser.conjAs, firstLetter, secondLetter);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOTATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NOTATION ::= Digit prime Digit 
            {
              Object RESULT =null;
		int firstDigitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firstDigitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String firstDigit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int secondDigitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int secondDigitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String secondDigit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Manager.numberLetterManage(parser.conjAs, firstDigit, secondDigit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOTATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // REG ::= SmallString 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(null,null,operator.replace("\"",""),parser.counter,"N",Integer.toString(parser.numerate),Integer.toString(parser.numerate),parser.numerate);parser.numerate++;parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REG ::= ExpReg 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(null,null,operator,parser.counter,"N",Integer.toString(parser.numerate),Integer.toString(parser.numerate),parser.numerate);parser.numerate++;parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // REG ::= lineJump 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(null,null,operator,parser.counter,"N",Integer.toString(parser.numerate),Integer.toString(parser.numerate),parser.numerate);parser.numerate++;parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // REG ::= singleQuote 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(null,null,operator,parser.counter,"N",Integer.toString(parser.numerate),Integer.toString(parser.numerate),parser.numerate);parser.numerate++;parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REG ::= doubleQuote 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(null,null,operator,parser.counter,"N",Integer.toString(parser.numerate),Integer.toString(parser.numerate),parser.numerate);parser.numerate++;parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // REG ::= questionMark REG 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node value1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(value1,null,operator,parser.counter,"A","","",0);parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // REG ::= zeroOrMore REG 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node value1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(value1,null,operator,parser.counter,"A","","",0);parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REG ::= oneOrMore REG 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node value1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(value1,null,operator,parser.counter,"N","","",0);parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REG ::= or REG REG 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node value1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node value2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(value1,value2,operator,parser.counter,"N","","",0);parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REG ::= point REG REG 
            {
              Node RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node value1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node value2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new Node(value1,value2,operator,parser.counter,"N","","",0);parser.counter++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATION ::= Word line greaterThan REG semicolon 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node value1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		parser.root=(Node)value1; value1=(Node)value1;value1.expresionName=name; MasterMindUI.regularExpressions.add(value1);value1.setUltimate(parser.numerate);Node.last=parser.numerate; parser.counter=1; parser.numerate = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= conj twoPoints Word NT$1 line greaterThan NOTATION semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int conjjleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conjjright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String conjj = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =null;
		int conjjleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conjjright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String conjj = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.conjAs="{"+conjj+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= DECLARATION Word line greaterThan REG semicolon 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int value1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node value1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		parser.root=value1;value1.expresionName=name; MasterMindUI.regularExpressions.add(value1);value1.setUltimate(parser.numerate); Node.last=parser.numerate;parser.counter=1;parser.numerate=1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= DECLARATION conj twoPoints Word NT$0 line greaterThan NOTATION semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int conjjleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conjjright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String conjj = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int conjjleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conjjright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String conjj = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
parser.conjAs="{"+conjj+"}";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= Word twoPoints BigString semicolon 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String statement = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int entryleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int entryright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String entry = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Statement.newStatement(statement,entry+"#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENT ::= STATEMENT Word twoPoints BigString semicolon 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String statement = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int entryleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int entryright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String entry = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Statement.newStatement(statement,entry+"#");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXP ::= openingKey DECLARATION percent percent percent percent STATEMENT closingKey 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

